name: asan_clang_16

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest  # Or any supported runner, used to set up the container environment
    container:
      image: debian:latest  # The container image to use

    steps:
    - name: Install Git
      run: apt update && apt install -y git

    - name: Verify Git Installation
      run: git --version
      
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install Clang 16, CMake
      run: |
           apt update -y
           apt-get upgrade -y
           apt install -y wget lsb-release software-properties-common
           wget https://apt.llvm.org/llvm-snapshot.gpg.key
           apt-key add llvm-snapshot.gpg.key
           wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | gpg --dearmor -o /usr/share/keyrings/llvm-snapshot.gpg
           echo "deb [signed-by=/usr/share/keyrings/llvm-snapshot.gpg] http://apt.llvm.org/bookworm/ llvm-toolchain-bookworm-16 main" | tee /etc/apt/sources.list.d/llvm.list
           apt update -y
           apt install -y python3
           ln -sf /usr/bin/python3 /usr/bin/python  # Create a symlink for python
           apt install -y clang-16 lld-16 cmake
           update-alternatives --install /usr/bin/clang clang /usr/bin/clang-16 100
           update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-16 100

    - name: Verify python version
      run: python --version

    - name: Add safe repo directory
      run: |
           git init
           git config --global --add safe.directory /__w/tinycoro/tinycoro

    - name: Initialize Git submodules
      run: git submodule update --init --recursive
      working-directory: ${{ github.workspace }}

    - name: Debug Git Config
      run: cat .git/config
      working-directory: ${{ github.workspace }}

    - name: Debug Submodules
      run: git submodule status
      working-directory: ${{ github.workspace }}

    - name: Configure with coverage flags using Clang
      run: cmake -B build -D CMAKE_BUILD_TYPE=Debug -D CMAKE_CXX_COMPILER=clang++-16 -D CMAKE_C_COMPILER=clang-16 -D WithASAN=ON -D BUILD_WITH_DIAGNOSTICS=ON
      working-directory: ${{ github.workspace }}

    - name: Build
      run: cmake --build build
      working-directory: ${{ github.workspace }}

    - name: Run Unit Tests
      run: ./build/test/tinycoro_tests
      working-directory: ${{ github.workspace }}

    - name: Run Examples
      run: ./build/tinycoro_example
      working-directory: ${{ github.workspace }}

    - name: Run echo server and stress test
      run: |
        ./build/example/echo_server_example/tinycoro_echo_server &
        python ./example/echo_server_example/echo_server_stress_test.py 1000 true &
        wait
      working-directory: ${{ github.workspace }}
