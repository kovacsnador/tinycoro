name: cmake

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#configuring-a-build-matrix
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    container: ${{ matrix.config.container }}

    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: "Linux g++ 11 C++20",
            os: ubuntu-latest,
            container: "",
            buildtype: Release,
            cxx: "g++-11",
            cxxver: 20,
          }
          - {
            name: "Linux g++ 12 C++20",
            os: ubuntu-latest,
            container: "",
            buildtype: Release,
            cxx: "g++-12",
            cxxver: 20,
          }
          - {
            name: "Linux clang-14 C++20",
            os: debian-latest,
            container: "",
            buildtype: Release,
            cxx: "clang++-14",
            cxx_flags: -stdlib=libc++,
            exe_linker_flags: -lc++,
            cxxver: 20,
          }
          - {
            name: "Linux clang-15 C++20 Debug",
            os: debian-latest,
            container: "",
            buildtype: Debug,
            cxx: "clang++-15",
            cxx_flags: -stdlib=libc++,
            exe_linker_flags: -lc++,
            cxxver: 20,
          }
          - {
            name: "Linux clang-15 C++20",
            os: debian-latest,
            container: "",
            buildtype: Release,
            cxx: "clang++-15",
            cxx_flags: -stdlib=libc++,
            exe_linker_flags: -lc++,
            cxxver: 20,
          }
          - {
            name: "Linux clang-16 C++20",
            os: debian-latest,
            buildtype: Release,
            cxx: "clang++-16",
            cxx_flags: -stdlib=libc++,
            exe_linker_flags: -lc++,
            cxxver: 20,
          }
          
    steps:
    - uses: actions/checkout@v3

    - name: Install g++ 11
      id: install_gcc_11
      if: startsWith(matrix.config.os, 'ubuntu') && ( matrix.config.cxx == 'g++-11' )
      shell: bash
      working-directory: ${{ env.HOME }}
      run: |
        sudo add-apt-repository ppa:ubuntu-toolchain-r/ppa
        sudo apt-get install g++-11

    - name: Install g++ 12
      id: install_gcc_12
      if: startsWith(matrix.config.os, 'ubuntu') && ( matrix.config.cxx == 'g++-12' )
      shell: bash
      working-directory: ${{ env.HOME }}
      run: |
        sudo apt-get install g++-12

    - name: Add safe repo dirercory
      run: git config --global --add safe.directory /__w/tinycoro/tinycoro

    - name: Initialize Git submodules
      run: git submodule update --init --recursive
      working-directory: ${{ github.workspace }}

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      if: (!contains(matrix.config.mingw, 'MINGW') && (matrix.config.cxx != 'g++-13'))
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      env: 
        CXX: ${{ matrix.config.cxx }}
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: |
        # run environment setup script if any
        [ -n "${{ matrix.config.environment_script }}" ] && "${{ matrix.config.environment_script }}"

        cmake $GITHUB_WORKSPACE \
          -DCMAKE_BUILD_TYPE=${{ matrix.config.buildtype }} \
          -DCMAKE_CXX_STANDARD=${{ matrix.config.cxxver }} \
          -DBUILD_TESTING=ON \
          -DCMAKE_CXX_FLAGS=${{ matrix.config.cxx_flags }} \
          -DCMAKE_EXE_LINKER_FLAGS=${{ matrix.config.exe_linker_flags }} \
          -DCMAKE_VERBOSE_MAKEFILE=ON

    - name: Build
      if: (!contains(matrix.config.mingw, 'MINGW'))
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config ${{ matrix.config.buildtype }}

    - name: Unit tests
      if: (!contains(matrix.config.mingw, 'MINGW'))
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: test/tinycoro_tests --output-on-failure -C ${{ matrix.config.buildtype }}

    - name: Ls-la
      if: (!contains(matrix.config.mingw, 'MINGW'))
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ls -la
    
    - name: Examples
      if: (!contains(matrix.config.mingw, 'MINGW'))
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ./tinycoro_example --output-on-failure -C ${{ matrix.config.buildtype }}
